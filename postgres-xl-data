#!/bin/bash
#
#   Resource Agent for managing Postgres-XL datanode resources.
#
#   License: PostgreSQL License.
#   (c) 2017 Bitnine Global, Inc.

: ${OCF_FUNCTIONS_DIR=$OCF_ROOT/lib/heartbeat}
. $OCF_FUNCTIONS_DIR/ocf-shellfuncs

OCF_RESKEY_user_default=postgres
OCF_RESKEY_bindir_default=/usr/local/pgsql/bin
OCF_RESKEY_host_default=$(hostname)
OCF_RESKEY_port_default=5432

: ${OCF_RESKEY_user=$OCF_RESKEY_user_default}
: ${OCF_RESKEY_bindir=$OCF_RESKEY_bindir_default}
: ${OCF_RESKEY_host=$OCF_RESKEY_host_default}
: ${OCF_RESKEY_port=$OCF_RESKEY_port_default}

pg_ctl=$OCF_RESKEY_bindir/pg_ctl
pg_isready=$OCF_RESKEY_bindir/pg_isready
psql=$OCF_RESKEY_bindir/psql

runasowner() {
    local loglevel=''

    case $1 in
        -info|-warn)
            loglevel=$1
        shift
        ;;
    esac

    ocf_run $loglevel su $OCF_RESKEY_user -c "cd $OCF_RESKEY_datadir; $*"
}

meta_data() {
    cat <<EOF
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="postgres-xl-data">
  <version>1.0</version>
  <longdesc lang="en">
Resource agent for a datanode in a Postgres-XL cluster. It manages a datanode as an HA resource.
  </longdesc>
  <shortdesc lang="en">Resource agent for a datanode in a Postgres-XL cluster</shortdesc>
  <parameters>
    <parameter name="user">
      <longdesc lang="en">
The user who starts datanode.
      </longdesc>
      <shortdesc lang="en">The user who starts datanode</shortdesc>
      <content type="string" default="$OCF_RESKEY_user_default" />
    </parameter>
    <parameter name="bindir">
      <longdesc lang="en">
Path to the directory storing the Postgres-XL binaries. The resource agent uses pg_ctl and pg_isready.
      </longdesc>
      <shortdesc lang="en">Path to the Postgres-XL binaries</shortdesc>
      <content type="string" default="$OCF_RESKEY_bindir_default" />
    </parameter>
    <parameter name="datadir" required="1">
      <longdesc lang="en">
Path to the datanode data directory.
      </longdesc>
      <shortdesc lang="en">Path to the datanode data directory</shortdesc>
      <content type="string" />
    </parameter>
    <parameter name="host">
      <longdesc lang="en">
Host IP address or unix socket directory the instance is listening on.
      </longdesc>
      <shortdesc lang="en">Instance IP or unix socket directory</shortdesc>
      <content type="string" default="$OCF_RESKEY_host_default" />
    </parameter>
    <parameter name="port">
      <longdesc lang="en">
Port the instance is listening on.
      </longdesc>
      <shortdesc lang="en">Instance port</shortdesc>
      <content type="integer" default="$OCF_RESKEY_port_default" />
    </parameter>
    <parameter name="nodename" required="1">
      <longdesc lang="en">
The name of datanode.
      </longdesc>
      <shortdesc lang="en">The name of datanode</shortdesc>
      <content type="string" />
    </parameter>
  </parameters>
  <actions>
    <action name="start" timeout="60" />
    <action name="stop" timeout="60" />
    <action name="monitor" timeout="10" interval="15" depth="0" />
    <action name="meta-data" timeout="5" />
    <action name="promote" timeout="30" />
    <action name="demote" timeout="120" />
  </actions>
</resource-agent>
EOF
}

ocf_start() {
    local is_slave
    local status

    test -f $OCF_RESKEY_datadir/recovery.conf
    is_slave=$?

    ocf_monitor
    status=$?

    if [ $is_slave -eq 0 ]; then
        if [ $status -eq $OCF_SUCCESS ]; then
            ocf_log info 'Datanode is already running (slave)'
            return $OCF_SUCCESS
        fi
    else
        if [ $status -eq $OCF_RUNNING_MASTER ]; then
            ocf_log info 'Datanode is already running (master)'
            return $OCF_SUCCESS
        fi
    fi

    runasowner "$pg_ctl start -Z datanode -w -D $OCF_RESKEY_datadir -l datanode.logfile"
    if [ $? -eq 0 ]; then
        ocf_log info 'Datanode is started'
        return $OCF_SUCCESS
    else
        ocf_exit_reason "Can't start Datanode"
        return $OCF_ERR_GENERIC
    fi
}

ocf_stop() {
    ocf_monitor -info
    if [ $? -eq $OCF_NOT_RUNNING ]; then
        ocf_log info 'Datanode already stopped'
        return $OCF_SUCCESS
    fi

    runasowner "$pg_ctl stop -w -D $OCF_RESKEY_datadir"
    if [ $? -eq 0 ]; then
        return $OCF_SUCCESS
    else
        ocf_exit_reason 'Datanode failed to stop'
        return $OCF_ERR_GENERIC
    fi
}

ocf_monitor() {
    local loglevel=$1

    if ! runasowner "test -w $OCF_RESKEY_datadir"; then
        ocf_log info "$OCF_RESKEY_datadir does not exist"
        return $OCF_NOT_RUNNING
    fi

    runasowner $loglevel "$pg_isready -h $OCF_RESKEY_host -p $OCF_RESKEY_port"
    case $? in
        0)  # accepting connections
            crm_master -l reboot -v 1000
            return $OCF_RUNNING_MASTER
            ;;
        1)  # rejecting connections (slave)
            crm_master -l reboot -v 0
            return $OCF_SUCCESS
            ;;
        2)  # no response
            crm_master -l reboot -D
            return $OCF_NOT_RUNNING
            ;;
        *)
            exit $OCF_ERR_GENERIC
    esac
}

ocf_promote() {
    ocf_monitor
    case $? in
        $OCF_RUNNING_MASTER)
            ocf_log info "$OCF_RESKEY_nodename is already running as a master"
            return $OCF_SUCCESS
            ;;
        $OCF_SUCCESS)
            ocf_log debug "$OCF_RESKEY_nodename is running as a slave"
            ;;
        $OCF_NOT_RUNNING)
            ocf_log err "$OCF_RESKEY_nodename is currently not running"
            return $OCF_ERR_GENERIC
    esac

    runasowner "$pg_ctl promote -Z datanode -w -D $OCF_RESKEY_datadir"
    if [ $? -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi

    while [ ocf_monitor -ne $OCF_RUNNING_MASTER ]; do
        ocf_log info 'waiting for the promote to complete'
        sleep 1;
    done

    while true; do
        ocf_monitor
        if [ $? -eq $OCF_RUNNING_MASTER ]; then
            break
        fi

        ocf_log debug 'waiting for the promote to complete'
        sleep 1;
    done

    output=$(su $OCF_RESKEY_user -c "$psql -h $OCF_RESKEY_host -p $OCF_RESKEY_port -Atc \"SELECT node_name, node_host, node_port FROM pgxc_node\"")
    for node in $output; do
        IFS='|' read -a info <<< "$node"

        if [ "${info[0]}" = "$OCF_RESKEY_nodename" ]; then
            ocf_log info "ALTER NODE $OCF_RESKEY_nodename"
            runasowner "$psql -h $OCF_RESKEY_host -p $OCF_RESKEY_port -c \"ALTER NODE $OCF_RESKEY_nodename WITH (HOST='$OCF_RESKEY_host', PORT=$OCF_RESKEY_port); SELECT pgxc_pool_reload()\""
        else
            ocf_log info "EXECUTE DIRECT ON ($nodename)"
            runasowner "$psql -h ${info[1]} -p ${info[2]} -c \"ALTER NODE $OCF_RESKEY_nodename WITH (HOST='$OCF_RESKEY_host', PORT=$OCF_RESKEY_port); SELECT pgxc_pool_reload()\""
        fi
    done

    crm_master -l reboot -v 1000

    ocf_log info "$OCF_RESKEY_datadir: promoted to master"
    return $OCF_SUCCESS
}

ocf_demote() {
    crm_master -l reboot -v 0

    return $OCF_SUCCESS
}

case $__OCF_ACTION in
    meta-data)
        meta_data
        exit $OCF_SUCCESS
        ;;
    start)
        ocf_start
        exit $?
        ;;
    stop)
        ocf_stop
        exit $?
        ;;
    monitor)
        ocf_monitor
        exit $?
        ;;
    promote)
        ocf_promote
        exit $?
        ;;
    demote)
        ocf_demote
        exit $?
        ;;
esac
